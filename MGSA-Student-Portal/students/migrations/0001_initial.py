# Generated by Django 3.2.20 on 2025-10-23 22:12

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_id', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('year_of_study', models.CharField(choices=[('Fresh', 'Fresh'), ('2nd Year', '2nd Year'), ('3rd Year', '3rd Year'), ('4th Year', '4th Year'), ('5th Year', '5th Year'), ('6th Year', '6th Year'), ('Graduate', 'Graduate')], default='Fresh', max_length=10)),
                ('current_semester', models.CharField(choices=[('1st', '1st Semester'), ('2nd', '2nd Semester'), ('3rd', '3rd Semester'), ('Summer', 'Summer')], default='1st', max_length=10)),
                ('gpa', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('cgpa', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('is_active_student', models.BooleanField(default=True)),
                ('academic_status', models.CharField(choices=[('regular', 'Regular'), ('probation', 'Academic Probation'), ('warning', 'Academic Warning'), ('suspended', 'Suspended'), ('graduated', 'Graduated')], default='regular', max_length=20)),
                ('emergency_contact_name', models.CharField(blank=True, max_length=100)),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=15)),
                ('emergency_contact_relation', models.CharField(blank=True, max_length=50)),
                ('bio', models.TextField(blank=True, help_text='Short biography about the student')),
                ('interests', models.JSONField(blank=True, default=list, help_text='Student interests/hobbies')),
                ('skills', models.JSONField(blank=True, default=list, help_text='Student skills')),
                ('preferred_study_methods', models.JSONField(blank=True, default=list, help_text='Preferred study methods (group, individual, etc.)')),
                ('availability', models.JSONField(blank=True, default=list, help_text='Weekly availability for tutorials/study groups')),
                ('profile_completion_percentage', models.PositiveIntegerField(default=0)),
                ('last_profile_update', models.DateTimeField(auto_now=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_students', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
                'ordering': ['user__first_name', 'user__last_name'],
            },
        ),
        migrations.CreateModel(
            name='StudentAttendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('tutorial', 'Tutorial'), ('workshop', 'Workshop'), ('seminar', 'Seminar'), ('meeting', 'Meeting'), ('event', 'Event')], max_length=20)),
                ('event_title', models.CharField(max_length=200)),
                ('event_date', models.DateTimeField()),
                ('duration_minutes', models.PositiveIntegerField(default=60)),
                ('present', models.BooleanField(default=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('recorded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendance_records', to='students.student')),
            ],
            options={
                'verbose_name': 'Student Attendance',
                'verbose_name_plural': 'Student Attendance Records',
                'ordering': ['-event_date'],
            },
        ),
        migrations.CreateModel(
            name='StudentAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('achievement_type', models.CharField(choices=[('academic', 'Academic'), ('sports', 'Sports'), ('cultural', 'Cultural'), ('leadership', 'Leadership'), ('community', 'Community Service'), ('research', 'Research'), ('other', 'Other')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('date_achieved', models.DateField()),
                ('organization', models.CharField(blank=True, max_length=200)),
                ('certificate_url', models.URLField(blank=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to='students.student')),
            ],
            options={
                'verbose_name': 'Student Achievement',
                'verbose_name_plural': 'Student Achievements',
                'ordering': ['-date_achieved'],
            },
        ),
        migrations.CreateModel(
            name='StudentAcademicRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_code', models.CharField(max_length=20)),
                ('course_name', models.CharField(max_length=200)),
                ('credit_hours', models.PositiveIntegerField()),
                ('grade', models.CharField(max_length=5)),
                ('grade_points', models.DecimalField(decimal_places=2, max_digits=3)),
                ('semester', models.CharField(max_length=10)),
                ('academic_year', models.CharField(max_length=10)),
                ('is_transfer_credit', models.BooleanField(default=False)),
                ('remarks', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='academic_records', to='students.student')),
            ],
            options={
                'verbose_name': 'Academic Record',
                'verbose_name_plural': 'Academic Records',
                'ordering': ['-academic_year', 'semester', 'course_code'],
                'unique_together': {('student', 'course_code', 'semester', 'academic_year')},
            },
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['student_id'], name='students_st_student_e7126a_idx'),
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['year_of_study'], name='students_st_year_of_55109d_idx'),
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['academic_status'], name='students_st_academi_f12d86_idx'),
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['is_verified'], name='students_st_is_veri_91ec55_idx'),
        ),
    ]
